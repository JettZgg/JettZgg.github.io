<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Performance Engineering Note 1 - Queueing Theory</title>
      <link href="/2024/01/28/Performance-Engineering-note-1/"/>
      <url>/2024/01/28/Performance-Engineering-note-1/</url>
      
        <content type="html"><![CDATA[<h2 id="System-Flow"><a href="#System-Flow" class="headerlink" title="System Flow"></a>System Flow</h2><figure align="center">  <img src="https://jettzgg.github.io/images/image-15.png" alt="Alt text" width="100%">  <figcaption>System Flow</figcaption></figure><ul><li>Arrival process, $\lambda$ average rate</li><li>Queue process, method, size</li><li>Service process, $\mu$ average rate</li><li>Arrival and service processes are stochastic (random with probabilities)</li></ul><h2 id="Stable-system-in-steay-state"><a href="#Stable-system-in-steay-state" class="headerlink" title="Stable system in steay state"></a>Stable system in steay state</h2><p>Average input rate &#x3D; Average output rate</p><h2 id="John-Little’s-Law"><a href="#John-Little’s-Law" class="headerlink" title="John Little’s Law"></a>John Little’s Law</h2><ul><li>The average number of customers stored in a system is equal to the product of the <strong>average arrival rate</strong> to the system and the <strong>average time spent in the system</strong>.</li><li>N &#x3D; $\lambda$ T</li></ul><h2 id="State-in-queueing-system"><a href="#State-in-queueing-system" class="headerlink" title="State in queueing system"></a>State in queueing system</h2><ul><li>A queueing systems can be thought of having a number of states</li><li>State 0 is when the system is empty</li><li>State 1 means that there is 1 customer in the system </li><li>State n means that there are n customers in the system</li><li>If $\lambda$  is the arrival rate then the probability of getting 1 arrival in a very short time interval $d$ is $\lambda$ $d$. Also if the departure rate is $\mu$  then the probability of getting 1 departure in a very short time interval $d$ is $\mu$ $d$.<figure align="center"><img src="https://jettzgg.github.io/images/image-16.png" alt="Alt text" width="100%"><figcaption>State Flow</figcaption></figure></li></ul><h2 id="Probability-of-a-finite-Queueing-System"><a href="#Probability-of-a-finite-Queueing-System" class="headerlink" title="Probability of a finite Queueing System"></a>Probability of a finite Queueing System</h2><ul><li><p>The long term probability of being in any state $S_n$ is defined by $P_n$. If this is in steady state, then we can cut the chain at any point and balance the flows in each direction.</p><figure align="center"><img src="https://jettzgg.github.io/images/image-17.png" alt="Alt text" width="60%"><figcaption>The flow balance equations</figcaption></figure></li><li><p>We notice that the dependency on $d$ is gone.</p></li><li><p>We also see that the dependency on the actual values of $\lambda$ and $\mu$ are gone and all that matters is the ratio of them, or $\rho &#x3D; \frac{\lambda}{\mu}$.</p></li><li><p>We need 1 more equation to solve this and we get it from the fact that we must be in a state at every time, or the sum of the probabilities must be 1.</p></li></ul><div align="center">$1 = P_0 + P_1 + P_2 + \ldots + P_{n-1} + P_n$</div><div align="center">$1 = P_0 + \rho P_0 + \rho^2 P_0 + \ldots + \rho^{n-1} P_0 + \rho^n P_0$</div><div align="center">$P_0 = \frac{1}{1 + \rho + \rho^2 + \ldots + \rho^{n-1} + \rho^n}$</div><br><div align="center">$\sum_{i=0}^{n} \rho^i = \sum_{i=0}^{\infty} \rho^i - \sum_{i=n+1}^{\infty} \rho^i = \frac{1}{1 - \rho} - \frac{\rho^{n+1}}{1 - \rho} = \frac{1 - \rho^{n+1}}{1 - \rho} ; \quad \rho < 1$</div><br><div align="center">$P_0 = \frac{1 - \rho}{1 - \rho^{n+1}}$</div><div align="center">$P_1 = \rho P_0 = \frac{\rho(1 - \rho)}{1 - \rho^{n+1}}$</div><div align="center">$P_i = \rho^i P_0 = \frac{\rho^i(1 - \rho)}{1 - \rho^{n+1}}$</div><div align="center">$P_n = \rho^n P_0 = \frac{\rho^n(1 - \rho)}{1 - \rho^{n+1}}$</div><br><ul><li>In a finite queue, the blocking probability, denoted as $P_B$, is the probability that the queue has reached its capacity limit, which is the same as the probability of there being $n$ customers, expressed as $P_B &#x3D; P_n$.</li><li>For an infinite queue, there is no blocking, meaning customers are never turned away, thus the system’s equations will not include loss terms.</li></ul><h2 id="Probability-of-an-infinite-Queueing-System"><a href="#Probability-of-an-infinite-Queueing-System" class="headerlink" title="Probability of an infinite Queueing System"></a>Probability of an infinite Queueing System</h2><br><div align="center">$P_0 = \frac{1}{1 + \rho + \rho^2 + \dots} = 1 - \rho$</div><div align="center">$P_1 = \rho P_0 = \rho (1 - \rho)$</div><div align="center">$P_i = \rho^i P_0 = \rho^i (1 - \rho)$</div><br><ul><li>There is no loss in this system and the queue could be unstable if $\rho \geq 1$. In fact for $\rho &#x3D; 1$ the equations that we have derived do not hold.</li><li>Once we have found the state probabilities we can then find out any information that we want from the system.</li></ul><h2 id="Why-a-queueing-system-is-unstable-when-rho-geq-1"><a href="#Why-a-queueing-system-is-unstable-when-rho-geq-1" class="headerlink" title="Why a queueing system is unstable when $\rho \geq 1$"></a>Why a queueing system is unstable when $\rho \geq 1$</h2><p>Consider a small café where customers arrive randomly and a single barista serves them, similar to an M&#x2F;M&#x2F;1 queue model.</p><ul><li><p><strong>Poisson Process</strong>: Suppose the café averages 30 customers per hour, denoted as $\lambda &#x3D; 30$. This arrival rate is modeled as a Poisson process, indicating that customer arrivals are random and independent over time.</p></li><li><p><strong>Exponential Distribution</strong>: The barista serves at an average rate of one customer every 2 minutes, which translates to a service rate of $\mu &#x3D; 30$ customers per hour. The service times follow an exponential distribution, meaning the actual time to serve each customer varies randomly around the 2-minute average.</p></li><li><p><strong>Traffic Intensity</strong>: Traffic intensity $\rho$ is the ratio of the arrival rate ($\lambda$) to the service rate ($\mu$). If $\rho &#x3D; 1$, it suggests that the barista can just keep up with the customer arrivals on average.</p></li><li><p><strong>Implications of $\rho &#x3D; 1$</strong>: Although it may seem balanced, random fluctuations can lead to times when customer arrivals outpace service, causing a queue build-up. Without additional capacity to handle sudden surges, the system can become unstable, unable to consistently clear the queue.</p></li><li><p><strong>Stable System for $\rho &lt; 1$</strong>: If $\rho$ is less than 1, the system has the capacity to deal with peaks in demand, allowing the barista to catch up during less busy periods, leading to a stable queue length over time.</p></li></ul><h2 id="Calculation-of-average-number-and-wait-time"><a href="#Calculation-of-average-number-and-wait-time" class="headerlink" title="Calculation of average number and wait time"></a>Calculation of average number and wait time</h2><ul><li><strong>$N$</strong>: average number in the system</li><li><strong>$N_q$</strong>: average number in the queue</li><li><strong>T</strong>: average waiting time in the system</li><li><strong>W</strong>: average waiting time in the queue</li></ul><h3 id="In-the-infinite-system"><a href="#In-the-infinite-system" class="headerlink" title="In the infinite system"></a>In the infinite system</h3><div align="center"> $N = \sum_{i=0}^{\infty} i P_i = \frac{\rho}{1 - \rho}$</div><br><h3 id="In-the-finite-system"><a href="#In-the-finite-system" class="headerlink" title="In the finite system"></a>In the finite system</h3><div align="center"> $N = \sum_{i=0}^{n} i P_i = \frac{\rho + (\rho n - n - 1)\rho^{n+1}}{(1 - \rho^{n+1})(1 - \rho)}$</div><br><h3 id="Queueing-result"><a href="#Queueing-result" class="headerlink" title="Queueing result"></a>Queueing result</h3><ul><li>A non-linear curve<figure align="center"><img src="https://jettzgg.github.io/images/image-18.png" alt="Alt text" width="100%"><figcaption>Queueing result</figcaption></figure></li></ul><h3 id="Two-types-of-arrivals"><a href="#Two-types-of-arrivals" class="headerlink" title="Two types of arrivals"></a>Two types of arrivals</h3><ul><li><p><strong>Offered Arrival Rate ($\lambda$)</strong>: The average rate of customer arrivals per time unit, regardless of whether they are served or not.</p></li><li><p><strong>Carried Arrival Rate ($\gamma$)</strong>: The actual rate of customer arrivals that are served per time unit. This rate may be lower than $\lambda$ if the system is at full capacity and arriving customers are turned away.</p></li><li><p><strong>Relationship between $\lambda$ and $\gamma$</strong>: They are linked by the blocking probability ($P_B$), which is the chance that a customer is rejected. The carried rate $\gamma$ equals the offered rate $\lambda$ times the probability that a customer is not blocked, given by $(1 - P_B)$.</p></li></ul><div align="center"> $\gamma = \lambda (1 - P_B)$</div><br><div align="center"> $ \text{efficiency} = \frac{\gamma}{\mu} = \rho (1 - P_B) $</div><br>]]></content>
      
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Performance Engineering Note 0 - Intro</title>
      <link href="/2024/01/28/Performance-Engineering-note-0/"/>
      <url>/2024/01/28/Performance-Engineering-note-0/</url>
      
        <content type="html"><![CDATA[<h2 id="What-does-performance-mean"><a href="#What-does-performance-mean" class="headerlink" title="What does performance mean?"></a>What does performance mean?</h2><h3 id="measures"><a href="#measures" class="headerlink" title="measures"></a>measures</h3><ul><li>response time</li><li>throughput</li><li>efficiency</li><li>users’ QoE(Quality of Experience)</li></ul><h3 id="goals"><a href="#goals" class="headerlink" title="goals"></a>goals</h3><ul><li><strong>Best</strong> performance for a <strong>Given cost</strong></li><li><strong>Acceptable</strong> performance at <strong>Minimum cost</strong></li><li><strong>Performance&#x2F;cost trade-off</strong> determination for each of a number of alternatives</li><li><strong>Find and fix</strong> Perfermance problems</li><li><strong>When and How</strong> the system should be modified&#x2F;upgraded so that its performance remains <strong>acceptable</strong></li><li>etc…</li></ul><h2 id="How-to-measure-performance"><a href="#How-to-measure-performance" class="headerlink" title="How to measure performance?"></a>How to measure performance?</h2><h3 id="meaningful-metrics"><a href="#meaningful-metrics" class="headerlink" title="meaningful metrics"></a>meaningful metrics</h3><ul><li>user response time</li><li>component metrics that explain it</li><li>etc…</li></ul><h3 id="reproducibility"><a href="#reproducibility" class="headerlink" title="reproducibility"></a>reproducibility</h3><ul><li>machine configuration</li><li>cluster&#x2F;network&#x2F;database configuration</li><li>user input&#x2F;requests</li></ul><h3 id="real-applications-benchmark"><a href="#real-applications-benchmark" class="headerlink" title="real applications benchmark"></a>real applications benchmark</h3><ul><li><strong>SPEC</strong> (Standard Performance Evaluation Corporation)</li><li><strong>TPC</strong> (Transaction Processing Performance Council)</li></ul><h3 id="simulation-modelling"><a href="#simulation-modelling" class="headerlink" title="simulation &amp; modelling"></a>simulation &amp; modelling</h3><ul><li>long execution runs, with warm start to mimic steady-state behaviour</li><li>usually, application only, sometimes OS simulation</li><li>internal checks &amp; simulator “validation” for accuracy</li></ul><h2 id="Why-is-performance-evaluation-difficult"><a href="#Why-is-performance-evaluation-difficult" class="headerlink" title="Why is performance evaluation difficult?"></a>Why is performance evaluation difficult?</h2><ul><li>no goals for the performance study: goals are unclear, biased</li><li>unsystematic approach: arbitrary parameter and workload values</li><li>inappropriate performance metrics: not related to user’s QoE</li><li>unrealistic workload</li><li>inappropriate level of detail in the model</li><li>no analysis&#x2F;incorrect analysis: simulation run too short</li><li>ignoring variability, or future possibilities</li><li>inaapropriate presentation of results</li><li>etc…</li></ul><h2 id="An-example-of-misleading-performance-results"><a href="#An-example-of-misleading-performance-results" class="headerlink" title="An example of misleading performance results"></a>An example of misleading performance results</h2><figure align="center">  <img src="https://jettzgg.github.io/images/image-14.png" alt="Alt text" width="100%">  <figcaption>'wrt' means 'with respect to' here</figcaption></figure><h2 id="Systematic-approach-to-performance-evaluation"><a href="#Systematic-approach-to-performance-evaluation" class="headerlink" title="Systematic approach to performance evaluation"></a>Systematic approach to performance evaluation</h2><ul><li>State goals of the study and define system scope</li><li>Define system services and possible outcomes of user requests</li><li>Select performance metric(s)</li><li>Identify system parameters that affect performance<ul><li>Select which parameters are variable</li></ul></li><li>Select evaluation technique(s)<ul><li>Analytical modelling</li><li>Simulation&#x2F;emulation</li><li>Experimental (real system&#x2F;prototype)</li></ul></li><li>Select workload(s) to be studied</li><li>Design experiments</li><li>Analyse and interpret the data (statistical techniques)</li><li>Present the results in an understandable manner</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Note 0 - Normal Form, Data Types, JOIN, LIKE, ORDER BY, Functions</title>
      <link href="/2024/01/27/SQL-note-0/"/>
      <url>/2024/01/27/SQL-note-0/</url>
      
        <content type="html"><![CDATA[<h2 id="3-normal-form-to-make-tables"><a href="#3-normal-form-to-make-tables" class="headerlink" title="3 normal form to make tables"></a>3 normal form to make tables</h2><ol><li><p>A primary key is required for every table</p><figure align="center">  <img src="https://jettzgg.github.io/images/image-0.png" alt="Alt text" width="100%">  <figcaption>1NF</figcaption></figure></li><li><p>non-key attributes are dependent on whole key</p><figure align="center">  <img src="https://jettzgg.github.io/images/image-1.png" alt="Alt text" width="100%">  <figcaption>2NF</figcaption></figure></li><li><p>non-key attributes are denpedent on nothing but the whole key</p><figure align="center">  <img src="https://jettzgg.github.io/images/image-2.png" alt="Alt text" width="100%">  <figcaption>3NF</figcaption></figure></li></ol><h2 id="SQL-provides-4-types-of-statements-in-four-sub-languages"><a href="#SQL-provides-4-types-of-statements-in-four-sub-languages" class="headerlink" title="SQL provides 4 types of statements in four sub-languages"></a>SQL provides 4 types of statements in four sub-languages</h2><ol><li><p><strong>Date Definition Language (DDL)</strong>:<br>Statements for <strong>creating</strong> a database and its tables, for deleting tabless too.</p></li><li><p><strong>Data Manipulation Language (DML)</strong>:<br>Statements for <strong>adding</strong> data to tables and for retrieving data from tables.</p></li><li><p><strong>Data Control Languege (DCL)</strong>:<br>Statements for <strong>granting</strong> and revoking <strong>privileges</strong> to users of the database.</p></li><li><p><strong>Transaction Control Language (TCL)</strong>:<br>Statements for maintaining the State of the DB, via <strong>commits</strong> and <strong>rollbacks</strong>.</p></li></ol><h2 id="Surrogate-Key"><a href="#Surrogate-Key" class="headerlink" title="Surrogate Key"></a>Surrogate Key</h2><ul><li>A <strong>Surrogate Key</strong> is a type of primary key that is used in database design for the sole purpose of uniquely identifying a record within a table.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees (</span><br><span class="line">    EmployeeNumber <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    FirstName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    LastName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    BirthDate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (EmployeeNumber)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>In this table, <code>EmployeeNumber</code> is the surrogate key</p><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><ul><li><strong>BIGINT</strong>: <code>-9,223,372,036,854,775,808</code> to <code>9,223,372,036,854,775,807</code></li><li><strong>INT</strong>: <code>-2,147,483,648</code> to <code>2,147,483,647</code></li><li><strong>SMALLINT</strong>: <code>-32768</code> to <code>32767</code></li><li><strong>TINYINT</strong>: <code>0</code> to <code>255</code></li><li><strong>BIT</strong>: <code>0</code> to <code>1</code></li><li><strong>DECIMAL(precision, scale)</strong>: <code>-10^(precision - scale)</code> to <code>10^(precision - scale) - (1/10^scale)</code></li><li><strong>NUMERIC</strong>: <code>-10^38+1</code> to <code>10^38-1</code></li><li><strong>FLOAT</strong>: <code>-1.79E + 308</code> to <code>1.79E + 308</code></li><li><strong>REAL</strong>: <code>-3.40E + 38</code> to <code>3.40E + 38</code></li><li><strong>DATE</strong>: <code>Jan 1, 1753</code> to <code>Dec 31, 9999</code></li><li><strong>SMALLDATATIME</strong>: <code>Jan 1, 1900</code> to <code>Jun 6, 2079</code></li><li><strong>TIME</strong>: <code>00:00 AM</code> to <code>00:00 PM</code></li></ul><h3 id="Characters-String"><a href="#Characters-String" class="headerlink" title="Characters&#x2F; String"></a>Characters&#x2F; String</h3><ul><li><strong>CHAR</strong>: Maximum length of 8,000 characters. (Fixed length non-Unicode characters)</li><li><strong>VARCHAR</strong>: Maximum of 8,000 characters. (Variable-length non-Unicode data).</li><li><strong>VARCHAR(MAX)</strong>: Maximum length of 231characters, Variable-length non-Unicode data (SQL Server).</li><li><strong>TEXT</strong>: Variable-length non-Unicode data with a maximum length of 2,147,483,647 characters.</li></ul><h3 id="Unicode-charactres-String"><a href="#Unicode-charactres-String" class="headerlink" title="Unicode charactres&#x2F; String"></a>Unicode charactres&#x2F; String</h3><ul><li><strong>NCHAR</strong>: Maximum length of 4,000 characters. (Fixed length Unicode)</li><li><strong>NVARCHAR</strong>: Maximum length of 4,000 characters. (Variable length Unicode)</li><li><strong>NVARCHAR(MAX)</strong>: Maximum length of 231characters (SQL Server only). (Variable length Unicode)</li><li><strong>NTEXT</strong>: Maximum length of 1,073,741,823 characters. (Variable length Unicode )</li></ul><h3 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h3><ul><li><strong>BINARY</strong>: Maximum length of 8,000 bytes (Fixed-length binary data)</li><li><strong>VARBINARY</strong>: Maximum length of 8,000 bytes. (Variable length binary data)</li><li><strong>VARBINARY(MAX)</strong>: Maximum length of 231 bytes (SQL Server only). (Variable length Binary data)</li><li><strong>IMAGE</strong>: Maximum length of 2,147,483,647 bytes. (Variable length Binary Data)</li></ul><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><ul><li><strong>SQL_VARIANT</strong>: Stores values of various SQL Server-supported data types, except text, ntext, and timestamp.</li><li><strong>TIMESTAMP</strong>: Stores a database-wide unique number that gets updated every time a row gets updated</li><li><strong>UNIQUEIDENTIFIER</strong>: Store a globally unique identifier (GUID)</li><li><strong>XML</strong>: Stores XML instances in a column or variable (SQL Server)</li><li><strong>CURSOR</strong>: Reference to a cursor object.</li><li><strong>TABLE</strong>: Stores a result set for later processing</li></ul><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><h3 id="Cartesian-Join"><a href="#Cartesian-Join" class="headerlink" title="Cartesian Join"></a>Cartesian Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-3.png" alt="Alt text" width="100%">  <figcaption>Cartesian Join</figcaption></figure><h3 id="Self-Join"><a href="#Self-Join" class="headerlink" title="Self Join"></a>Self Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-4.png" alt="Alt text" width="100%">  <figcaption>Self Join</figcaption></figure><h3 id="Regular-Join-Inner-Join"><a href="#Regular-Join-Inner-Join" class="headerlink" title="Regular Join (Inner Join)"></a>Regular Join (Inner Join)</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-5.png" alt="Alt text" width="100%">  <figcaption>Inner Join</figcaption></figure><h3 id="Left-Join"><a href="#Left-Join" class="headerlink" title="Left Join"></a>Left Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-6.png" alt="Alt text" width="100%">  <figcaption>Left Join, keep the left table</figcaption></figure><h3 id="Right-Join"><a href="#Right-Join" class="headerlink" title="Right Join"></a>Right Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-7.png" alt="Alt text" width="100%">  <figcaption>Right Join, keep the right table</figcaption></figure><h3 id="Full-Outer-Join"><a href="#Full-Outer-Join" class="headerlink" title="Full Outer Join"></a>Full Outer Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-8.png" alt="Alt text" width="100%">  <figcaption>Full Outer Join, keep both table</figcaption></figure><h2 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h2><ul><li>“%”: 0, 1, or more characters</li><li>“_”: any 1 character</li></ul><p>Example:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Finds any records where the customer&#x27;s name starts with &#x27;J&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;J%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Finds any records where the customer&#x27;s name has &#x27;an&#x27; in any position</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%an%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Finds any records where the customer&#x27;s name ends with &#x27;son&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%son&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Finds any records where the customer&#x27;s name is five characters long and starts with &#x27;J&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;J____&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Finds any records where the customer&#x27;s name starts with &#x27;J&#x27; and the third letter is &#x27;n&#x27;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customers <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;J_n%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="Combining-SELECT-and-INSERT-statements"><a href="#Combining-SELECT-and-INSERT-statements" class="headerlink" title="Combining SELECT and INSERT statements"></a>Combining SELECT and INSERT statements</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-9.png" alt="Alt text" width="100%"></figure><p>Also, it’s important to mention that this syntax is specific to SQL Server. In other SQL database systems, such as MySQL or PostgreSQL, the approach to insert data into an already existing table would be different, often using <code>INSERT INTO ... SELECT ...</code> syntax.</p><h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><figure align="center">  <img src="https://jettzgg.github.io/images/image-10.png" alt="Alt text" width="100%"></figure><h2 id="Aggregate-functions"><a href="#Aggregate-functions" class="headerlink" title="Aggregate functions"></a>Aggregate functions</h2><ul><li>MIN: return smallest value</li><li>MAX: return largest value</li><li>SUM: return cumulative value</li><li>AVG: return mean value</li><li>COUNT: return num (not NULL) value</li><li>COUNT(*): return num (NULL included) rows</li></ul><figure align="center">  <img src="https://jettzgg.github.io/images/image-11.png" alt="Alt text" width="100%">  <figcaption>Some examples using aggregate functions</figcaption></figure><figure align="center">  <img src="https://jettzgg.github.io/images/image-12.png" alt="Alt text" width="100%">  <figcaption>Example 2</figcaption></figure><figure align="center">  <img src="https://jettzgg.github.io/images/image-13.png" alt="Alt text" width="100%">  <figcaption>Example 3 based on the Employees table</figcaption></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Notes </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
