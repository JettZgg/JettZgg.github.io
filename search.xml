<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL Week 1 - Normal Form, Data Types, Join</title>
      <link href="/2024/01/27/SQL-note-1/"/>
      <url>/2024/01/27/SQL-note-1/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="3-normal-form-to-make-tables"><a href="#3-normal-form-to-make-tables" class="headerlink" title="3 normal form to make tables"></a>3 normal form to make tables</h2><ol><li><p>A primary key is required for every table</p><figure align="center">  <img src="https://jettzgg.github.io/images/image.png" alt="Alt text" width="100%">  <figcaption>1NF</figcaption></figure></li><li><p>non-key attributes are dependent on whole key</p><figure align="center">  <img src="https://jettzgg.github.io/images/image-1.png" alt="Alt text" width="100%">  <figcaption>2NF</figcaption></figure></li><li><p>non-key attributes are denpedent on nothing but the whole key</p><figure align="center">  <img src="https://jettzgg.github.io/images/image-2.png" alt="Alt text" width="100%">  <figcaption>3NF</figcaption></figure></li></ol><h2 id="SQL-provides-4-types-of-statements-in-four-sub-languages"><a href="#SQL-provides-4-types-of-statements-in-four-sub-languages" class="headerlink" title="SQL provides 4 types of statements in four sub-languages"></a>SQL provides 4 types of statements in four sub-languages</h2><ol><li><p><strong>Date Definition Language (DDL)</strong>:<br>Statements for <strong>creating</strong> a database and its tables, for deleting tabless too.</p></li><li><p><strong>Data Manipulation Language (DML)</strong>:<br>Statements for <strong>adding</strong> data to tables and for retrieving data from tables.</p></li><li><p><strong>Data Control Languege (DCL)</strong>:<br>Statements for <strong>granting</strong> and revoking <strong>privileges</strong> to users of the database.</p></li><li><p><strong>Transaction Control Language (TCL)</strong>:<br>Statements for maintaining the State of the DB, via <strong>commits</strong> and <strong>rollbacks</strong>.</p></li></ol><h2 id="Surrogate-Key"><a href="#Surrogate-Key" class="headerlink" title="Surrogate Key"></a>Surrogate Key</h2><ul><li>A <strong>Surrogate Key</strong> is a type of primary key that is used in database design for the sole purpose of uniquely identifying a record within a table.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Employees (</span><br><span class="line">    EmployeeNumber <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">    FirstName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    LastName <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    BirthDate <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (EmployeeNumber)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>In this table, <code>EmployeeNumber</code> is the surrogate key</p><h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><h3 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h3><ul><li><strong>BIGINT</strong>: <code>-9,223,372,036,854,775,808</code> to <code>9,223,372,036,854,775,807</code></li><li><strong>INT</strong>: <code>-2,147,483,648</code> to <code>2,147,483,647</code></li><li><strong>SMALLINT</strong>: <code>-32768</code> to <code>32767</code></li><li><strong>TINYINT</strong>: <code>0</code> to <code>255</code></li><li><strong>BIT</strong>: <code>0</code> to <code>1</code></li><li><strong>DECIMAL(precision, scale)</strong>: <code>-10^(precision - scale)</code> to <code>10^(precision - scale) - (1/10^scale)</code></li><li><strong>NUMERIC</strong>: <code>-10^38+1</code> to <code>10^38-1</code></li><li><strong>FLOAT</strong>: <code>-1.79E + 308</code> to <code>1.79E + 308</code></li><li><strong>REAL</strong>: <code>-3.40E + 38</code> to <code>3.40E + 38</code></li><li><strong>DATE</strong>: <code>Jan 1, 1753</code> to <code>Dec 31, 9999</code></li><li><strong>SMALLDATATIME</strong>: <code>Jan 1, 1900</code> to <code>Jun 6, 2079</code></li><li><strong>TIME</strong>: <code>00:00 AM</code> to <code>00:00 PM</code></li></ul><h3 id="Characters-String"><a href="#Characters-String" class="headerlink" title="Characters&#x2F; String"></a>Characters&#x2F; String</h3><ul><li><strong>CHAR</strong>: Maximum length of 8,000 characters. (Fixed length non-Unicode characters)</li><li><strong>VARCHAR</strong>: Maximum of 8,000 characters. (Variable-length non-Unicode data).</li><li><strong>VARCHAR(MAX)</strong>: Maximum length of 231characters, Variable-length non-Unicode data (SQL Server).</li><li><strong>TEXT</strong>: Variable-length non-Unicode data with a maximum length of 2,147,483,647 characters.</li></ul><h3 id="Unicode-charactres-String"><a href="#Unicode-charactres-String" class="headerlink" title="Unicode charactres&#x2F; String"></a>Unicode charactres&#x2F; String</h3><ul><li><strong>NCHAR</strong>: Maximum length of 4,000 characters. (Fixed length Unicode)</li><li><strong>NVARCHAR</strong>: Maximum length of 4,000 characters. (Variable length Unicode)</li><li><strong>NVARCHAR(MAX)</strong>: Maximum length of 231characters (SQL Server only). (Variable length Unicode)</li><li><strong>NTEXT</strong>: Maximum length of 1,073,741,823 characters. (Variable length Unicode )</li></ul><h3 id="Binary"><a href="#Binary" class="headerlink" title="Binary"></a>Binary</h3><ul><li><strong>BINARY</strong>: Maximum length of 8,000 bytes (Fixed-length binary data)</li><li><strong>VARBINARY</strong>: Maximum length of 8,000 bytes. (Variable length binary data)</li><li><strong>VARBINARY(MAX)</strong>: Maximum length of 231 bytes (SQL Server only). (Variable length Binary data)</li><li><strong>IMAGE</strong>: Maximum length of 2,147,483,647 bytes. (Variable length Binary Data)</li></ul><h3 id="Miscellaneous"><a href="#Miscellaneous" class="headerlink" title="Miscellaneous"></a>Miscellaneous</h3><ul><li><strong>SQL_VARIANT</strong>: Stores values of various SQL Server-supported data types, except text, ntext, and timestamp.</li><li><strong>TIMESTAMP</strong>: Stores a database-wide unique number that gets updated every time a row gets updated</li><li><strong>UNIQUEIDENTIFIER</strong>: Store a globally unique identifier (GUID)</li><li><strong>XML</strong>: Stores XML instances in a column or variable (SQL Server)</li><li><strong>CURSOR</strong>: Reference to a cursor object.</li><li><strong>TABLE</strong>: Stores a result set for later processing</li></ul><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><h3 id="Cartesian-Join"><a href="#Cartesian-Join" class="headerlink" title="Cartesian Join"></a>Cartesian Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-3.png" alt="Alt text" width="100%">  <figcaption>Cartesian Join</figcaption></figure><h3 id="Self-Join"><a href="#Self-Join" class="headerlink" title="Self Join"></a>Self Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-4.png" alt="Alt text" width="100%">  <figcaption>Self Join</figcaption></figure><h3 id="Regular-Join-Inner-Join"><a href="#Regular-Join-Inner-Join" class="headerlink" title="Regular Join (Inner Join)"></a>Regular Join (Inner Join)</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-5.png" alt="Alt text" width="100%">  <figcaption>Inner Join</figcaption></figure><h3 id="Left-Join"><a href="#Left-Join" class="headerlink" title="Left Join"></a>Left Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-6.png" alt="Alt text" width="100%">  <figcaption>Left Join, keep the left table</figcaption></figure><h3 id="Right-Join"><a href="#Right-Join" class="headerlink" title="Right Join"></a>Right Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-7.png" alt="Alt text" width="100%">  <figcaption>Right Join, keep the right table</figcaption></figure><h3 id="Full-Outer-Join"><a href="#Full-Outer-Join" class="headerlink" title="Full Outer Join"></a>Full Outer Join</h3><figure align="center">  <img src="https://jettzgg.github.io/images/image-8.png" alt="Alt text" width="100%">  <figcaption>Full Outer Join, keep both table</figcaption></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
